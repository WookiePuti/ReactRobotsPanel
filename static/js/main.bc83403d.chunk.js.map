{"version":3,"sources":["components/Card.js","components/RobotCards.js","components/SearchComponent.js","components/Scroll.js","App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","RobotCards","robots","map","robot","index","key","SearchComponent","setSearchValue","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","connect","state","searchField","searchRobots","allRobots","requestRobots","isPending","error","dispatch","OnRequestRobots","axios","get","then","res","payload","data","catch","event","target","value","useEffect","console","log","filter","toLowerCase","includes","trim","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bc83403d.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = (props) => {\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img alt=\"photo\" src={`https://robohash.org/${props.id}?200x200`} />\n      <div>\n        <h2>{props.name}</h2>\n        <p>{props.email}</p>\n      </div>\n    </div>\n  );\n};\nexport default Card;\n","import React, { useEffect } from \"react\";\nimport Card from \"./Card\";\n\nconst RobotCards = (props) => {\n  const { robots } = props;\n\n  return robots.map((robot, index) => {\n    return (\n      <Card key={index} name={robot.name} email={robot.email} id={robot.id} />\n    );\n  });\n};\nexport default RobotCards;\n","import React, { Fragment, useState } from \"react\";\n\nconst SearchComponent = (props) => {\n  const { setSearchValue } = props;\n\n  return (\n    <Fragment>\n      <div className={\"pa2\"}>\n        <input\n          className={\"bg-lightest-blue pa3 ba b--green\"}\n          type={\"search\"}\n          placeholder={\"search Robots\"}\n          onChange={setSearchValue}\n        />\n      </div>\n    </Fragment>\n  );\n};\nexport default SearchComponent;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"5px solid black\",\n        height: \"800px\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\nexport default Scroll;\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./App.css\";\nimport RobotCards from \"./components/RobotCards\";\nimport tachyons from \"tachyons\";\nimport SearchComponent from \"./components/SearchComponent\";\nimport Scroll from \"./components/Scroll\";\nimport { requestRobots, setSearchField } from \"./actions\";\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    allRobots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    OnRequestRobots: () => dispatch(requestRobots()),\n    setSearchValue: (event) => dispatch(setSearchField(event.target.value)),\n  };\n};\n\nconst App = (props) => {\n  useEffect(() => {\n    console.log(\"start\");\n    props.OnRequestRobots();\n  }, []);\n\n  const { searchField, allRobots, setSearchValue } = props;\n\n  const robots = allRobots.filter((robot) => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase().trim());\n  });\n\n  return (\n    <div className={\"tc\"}>\n      <h1>Robots</h1>\n      <SearchComponent setSearchValue={setSearchValue} />\n      <Scroll>\n        <RobotCards robots={robots} />\n      </Scroll>\n      ;\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import axios from \"axios\";\n\nimport {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  axios\n    .get(\"https://jsonplaceholder.typicode.com/users\")\n    .then((res) =>\n      dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: res.data })\n    )\n    .catch((error) =>\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n    );\n};\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: null,\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, isPending: false, robots: action.payload };\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware, compose, combineReducers } from \"redux\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport { Provider } from \"react-redux\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  rootReducer,\n  /* preloadedState, */ composeEnhancers(applyMiddleware(thunkMiddleware))\n);\n\n// const store = createStore(searchRobots, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}